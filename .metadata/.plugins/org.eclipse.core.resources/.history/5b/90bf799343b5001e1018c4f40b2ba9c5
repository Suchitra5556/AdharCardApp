package com.employee.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.employee.entity.Employee;
import com.employee.exception.EmployeeNotFoundByIdException;
import com.employee.exception.EmployeeNotFoundWithAddressException;
import com.employee.exception.SalaryNotFoundException;
import com.employee.serviceImpl.EmployeeNamedServiceImpl;

@RestController
@RequestMapping("/nameQuery")
public class EmpNamedController 
{
	private static final Logger logger = LoggerFactory.getLogger(EmpNamedController.class);
	
	@Autowired
	private  EmployeeNamedServiceImpl employeeNamedServiceImpl;
	
	@GetMapping("/getBySal/{salary}")
	public List<Employee> getBySalary(@PathVariable Long salary) 
	{
		 List<Employee> list = employeeNamedServiceImpl.getBySalary(salary);
		 return list;
     }
	@GetMapping("/getBynameoradd/{name}/{address}")
	public List<Employee> getByNameOrAddress(@PathVariable String name,@PathVariable String address)
	{
		List<Employee> list = employeeNamedServiceImpl.getByNameOrAddress(name, address);
		return list;
	}
	@GetMapping("/getByIdAndName/{id}/{name}")
	public Employee getByIdAndName(@PathVariable Integer id, @PathVariable String name)
	{
		Employee emp = employeeNamedServiceImpl.getByIdAndName(id, name);
		return emp;
	}
	@GetMapping("/getByAddressAndNameUnOrder/{address}/{name}")
	public ResponseEntity<?> getByAddressAndNameUnOrder(@PathVariable String address,@PathVariable String name)
	{
		try {
		Employee emp =employeeNamedServiceImpl.getByAddressAndNameUnOrder(address, name);
		return new ResponseEntity<>(emp, HttpStatus.OK);
		}
		catch(EmployeeNotFoundWithAddressException e)
		{
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		catch (Exception e) {
			logger.error("Parent Class Exception Handdleddd...");
			return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
	}
	@GetMapping("/findByIdAndNameDetailsVarDiff/{empaddress}/{empname}")
	public Employee findByIdAndNameDetailsVarDiff(@PathVariable String empaddress, @PathVariable String empname) 
	{
		Employee emp= employeeNamedServiceImpl.findByIdAndNameDetailsVarDiff(empaddress, empname);
		
		return emp;
	}
	
	@GetMapping("/getByName/{name}")
	public ResponseEntity<?> getSalary(@PathVariable String name)
	{
		try {
		  Long bySalary = employeeNamedServiceImpl.getBySalary(name);
			
		  return new ResponseEntity<>(bySalary,HttpStatus.OK);
		  
		}
		catch(SalaryNotFoundException e)
		{
			logger.error("Custom Class Exception Handdleddd...");
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		catch (Exception e) {
			logger.error("Parent Class Exception Handdleddd...");
			return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		  
	}
	
	
	@GetMapping("/getByAddress/{address}")
	public ResponseEntity<?> getByAddress(@PathVariable String address)
	{
		try
		{
		 List<Object[]> byAddress = employeeNamedServiceImpl.getByAddress(address);
		return new ResponseEntity<>(byAddress, HttpStatus.OK);
		}
		catch(EmployeeNotFoundWithAddressException e)
		{
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		catch (Exception e) {
			logger.error("Parent Class Exception Handdleddd...");
			 
			return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/getByEmpId/{id}")
	public ResponseEntity<?>  getByEmpId(@PathVariable Integer id) 
	{
		try {
		 List<Employee> list = employeeNamedServiceImpl.getByEmpId(id);
		 return  new ResponseEntity<List<Employee>>(list, HttpStatus.OK);
		 
		}
		catch(EmployeeNotFoundByIdException e)
		{
			 return  new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		catch (Exception e) {
			
			System.out.println("Parent ex");
			 
			return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
		 
	}
	
	

	
}